# This file is used to configure your project.
# Read more about the various options under:
# https://setuptools.pypa.io/en/latest/userguide/declarative_config.html
# https://setuptools.pypa.io/en/latest/references/keywords.html

[metadata]
name = validate-pyproject
description = Validation library and CLI tool for checking on 'pyproject.toml' files using JSON Schema
author = Anderson Bravalheri
author_email = andersonbravalheri@gmail.com
license = MPL-2.0 and MIT and BSD-3-Clause
license_files = LICENSE.txt, NOTICE.txt
long_description = file: README.rst
long_description_content_type = text/x-rst; charset=UTF-8
url = https://github.com/abravalheri/validate-pyproject/
# Add here related links, for example:
project_urls =
    Documentation = https://validate-pyproject.readthedocs.io/
    Source = https://github.com/abravalheri/validate-pyproject
    Tracker = https://github.com/abravalheri/validate-pyproject/issues
    Changelog = https://validate-pyproject.readthedocs.io/en/latest/changelog.html
    Download = https://pypi.org/project/validate-pyproject/#files
#    Conda-Forge = https://anaconda.org/conda-forge/pyscaffold
#    Twitter = https://twitter.com/PyScaffold

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
python_requires = >=3.6

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    importlib-metadata; python_version<"3.8"
    importlib-resources; python_version<"3.7"
    # fastjsonschema>=2.15.2,<=3


[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
all =
    tomli>=1.2.1; python_version<"3.11"
    packaging>=20.4
    trove-classifiers>=2021.10.20

# Add here test requirements (semicolon/line-separated)
testing =
    setuptools
    pytest
    pytest-cov

typecheck =
    mypy
    importlib-resources

[options.entry_points]
# Add here console scripts like:
console_scripts =
    validate-pyproject = validate_pyproject.cli:main
validate_pyproject.tool_schema =
    setuptools = validate_pyproject.api:load_builtin_plugin
    distutils = validate_pyproject.api:load_builtin_plugin

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov validate_pyproject --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[mypy]
pretty = True
show_error_codes = True
show_error_context = True
show_traceback = True
ignore_missing_imports = True
warn_redundant_casts = True
warn_unused_ignores = True
# Add here plugins
# plugins = mypy_django_plugin.main, returns.contrib.mypy.returns_plugin

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.1.1
package = validate_pyproject
extensions =
    cirrus
    pre_commit
